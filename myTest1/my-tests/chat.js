import OpenAi from "openai";
import dotenv from "dotenv"
import { promptMessage } from "../utils/prompt.js";
import { data } from "./data.js";
import { entrega } from "./entrega.js";
dotenv.config()

const openai = new OpenAi({ apiKey: process.env.OPENAI_API_KEY })
const groq = new OpenAi({baseURL: " https://api.groq.com/openai/v1", apiKey: process.env.GROQ_API_KEY })

async function main() {
    //const model = "gpt-4-0125-preview"
    const model = "llama3-8b-8192"

    const tools = [
        {
            "type": "function",
            "function":{
                "name": "get_total_price",
                "description": "Calcula o preÃ§o total do pedido. Calcular somente apÃ³s o usuÃ¡rio ter informado o endereÃ§o de entrega",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "items_price": {
                            "type": "array",
                            "description": "Lista com os valores do preÃ§o de cada produto do pedido.",
                            "items": {
                                "type": "number"
                            }
                        },
                        "delivery_price":{
                            "type" : "number",
                            "description": "PreÃ§o de entrega baseado no bairro do usuÃ¡rio"
                        }
                    },
                    "required": [
                        "items_price",
                        "delivery_price"
                    ]
                }
            }
        },
    ]

    // let messages = [
    //     {
    //         role: "system",
    //         content: "VocÃª Ã© uma assistente virtual inteligente de delivery de uma padaria"
    //             + "VocÃª trata com educaÃ§Ã£o o usuÃ¡rio"
    //             + "VocÃª deve recolher o pedido do usuÃ¡rio"
    //             + "VocÃª deve recolher o endereÃ§o de entrega, (Rua, nÃºmero, bairro)"
    //             + "VocÃª deve confirmar o endereÃ§o de entrega"
    //             +" VocÃª pedir o bairro ao usuÃ¡rio se vocÃª nÃ£o tiver certeza do bairro"
    //             + "VocÃª deve calcular o total do pedido somente apÃ³s recolher o endereÃ§o"
    //             + "VocÃª deve recolher a forma de pagamento:dinheiro, cartÃ£o ou pix "
    //             + "Se o pagamento for em dinheiro, perguntar: 'Precisa de troco para quanto?'"
    //             + "O pagamento no cartÃ£o e pix sÃ£o realizado na entrega"
    //             + "Enviar resumo no formato especificado: 'Quantidade do produto' - 'nome do produto' - 'valor DO PRODUTO multiplicado pela quantidade' 'taxa de entrega'. Discriminando os valores"
    //             + "VocÃª deve perguntar se o usuÃ¡rio deseja mais algum produto"
    //             + "VocÃª nÃ£o responde nada que nÃ£o seja sobre pedidos do delivery e sobre a padaria"
    //             + "VocÃª nÃ£o altera o preÃ§o total apÃ³s calculado"
    //             + "VocÃª sÃ³ apresenta o cardÃ¡pio se o usuÃ¡rio perguntar sobre ele"
    //             + "Esse Ã© o cardÃ¡pio de produtos disponÃ­veis: " + data
    //             + "O preÃ§o da entrega Ã© com base no bairro do usuÃ¡rio, essa Ã© a lista: " + entrega
    //             + "O tempo de entrega para o bairro Centro Ã© de aproximadamente 30 minutos"
    //             + "NÃ£o aceitar pedidos fora do cardÃ¡pio"
    //             + "O tempo de entrega para outros bairros alÃ©m do Centro Ã© aproximadamente 45 minutos"
    //     }
    // ];

    let messages = [
        {
            role: "system",
            content: "Primeiro vocÃª deve dizer ao usuÃ¡rio: 'Escolha uma das opÃ§Ãµes para prosseguir: 1 - Fazer um pedido de delivery, 2 - Fazer uma encomenda, 3 - DÃºvidas'"
            +       "ApÃ³s o usuÃ¡rio escolher a opÃ§Ã£o desejada, vocÃª deve retornar um JSON no formato {\"opcao\": \"nÃºmero da opÃ§Ã£o\"}"
            +       "NÃ£o retornar nada alÃ©m do JSON"
                
        }
    ];
    
    while (true) {

        const text = await promptMessage("Mensagem>");

        messages.push(
            { role: "user", content: text }
        )

        const completion = await groq.chat.completions.create({
            messages,
            model,
            tools,
            temperature: .5
        });

        
        if(completion.choices[0].message.tool_calls){

            const fn = completion.choices[0].message.tool_calls[0].function.name;
            const args = JSON.parse(completion.choices[0].message.tool_calls[0].function.arguments);

            if (fn == "get_total_price"){
                const total_price = await getTotalPrice(args.items_price, args.delivery_price)

                messages.push({
                    role: 'function',
                    name: fn,
                    content: JSON.stringify(total_price)
                })

                const completionFn = await openai.chat.completions.create({
                    messages,
                    tools,
                    model
                })

                messages.push(
                    {role: "assistant", content: completionFn.choices[0].message.content}
                )

                console.log(completionFn.choices[0].message.content)
            }

        } else {

            messages.push(
                {role: "assistant", content: completion.choices[0].message.content}
            )
            console.log(completion.choices[0].message.content);
        }
        console.log("ðŸ’° usage", completion.usage);
    }


}

main()

// ----- FUNCTIONS ------- //

function getTotalPrice(items_price, delivery_price){
    console.log(items_price, delivery_price)
    let soma = 0
    for (let i = 0; i <items_price.length; i++){
        soma += items_price[i]
    }

    let valorTotal = soma + delivery_price
   
    return valorTotal
}